{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ThreadX++ Introduction Hi all This is my little project, it's a big wrapper for ThreadX (AZURE RTOS) to work as c++, here some important pointes about the project: The main target of the project is one: SIMPLE, it's meaning that i do it much tiny that it can be, the price of course is that in way we lost abilities of the ThreadX I not cover all the API of ThreadX, I build this project on STM32H743, So if you using other processor of STM32 family i guess it will work, but if you have other MCU some of the abilities of my project will not available (like a watchdog) but you still can get most of the core function (you will need to change the code). Abilities The abilities of ThreadX++ Events-oriented: I added the events like delegate, so you can create event in one thread and register it from other thread. Object-oriented: most of the API of the ThreadX get warper of as class, hte list of the API Thread: Event: Event that one thread will create and other can register and wakeup one it invoke Mutex: Queue: Safe queue to send data between thread Semaphore: TimeEvent: Event that thread creating and the event will wake up the thread every amount time. MemoryPool: Easy way to create pool of memory (overriding \"new\" and \"delete\"). STM32 easy use: I also do some wrapper to very useful peripherals of ST: Watchdog: Simple watchdog Measure US: I used the \"DWT\" for create debug class that can easily measure time in microsecond Internal registry : Registry (like dictionary) that use to save data in the internal flash on the ST. Printf : Use the SWT port for printing much more effective. Where to start First you will need to install the ThreadX on your MCU, i made a tutorial for ST chips, if you have other MCU i also recommend to read it because it contain some configuration of the ThreadX that necessary. The main tutorials: Install ThreadX on ST","title":"Home"},{"location":"#threadx","text":"","title":"ThreadX++"},{"location":"#introduction","text":"Hi all This is my little project, it's a big wrapper for ThreadX (AZURE RTOS) to work as c++, here some important pointes about the project: The main target of the project is one: SIMPLE, it's meaning that i do it much tiny that it can be, the price of course is that in way we lost abilities of the ThreadX I not cover all the API of ThreadX, I build this project on STM32H743, So if you using other processor of STM32 family i guess it will work, but if you have other MCU some of the abilities of my project will not available (like a watchdog) but you still can get most of the core function (you will need to change the code).","title":"Introduction"},{"location":"#abilities","text":"The abilities of ThreadX++ Events-oriented: I added the events like delegate, so you can create event in one thread and register it from other thread. Object-oriented: most of the API of the ThreadX get warper of as class, hte list of the API Thread: Event: Event that one thread will create and other can register and wakeup one it invoke Mutex: Queue: Safe queue to send data between thread Semaphore: TimeEvent: Event that thread creating and the event will wake up the thread every amount time. MemoryPool: Easy way to create pool of memory (overriding \"new\" and \"delete\"). STM32 easy use: I also do some wrapper to very useful peripherals of ST: Watchdog: Simple watchdog Measure US: I used the \"DWT\" for create debug class that can easily measure time in microsecond Internal registry : Registry (like dictionary) that use to save data in the internal flash on the ST. Printf : Use the SWT port for printing much more effective.","title":"Abilities"},{"location":"#where-to-start","text":"First you will need to install the ThreadX on your MCU, i made a tutorial for ST chips, if you have other MCU i also recommend to read it because it contain some configuration of the ThreadX that necessary. The main tutorials: Install ThreadX on ST","title":"Where to start"},{"location":"about/","text":"Gravem discedentem contorto nostro virgine This project write by me... I currently work as embedded software engineer for more than 10 years, i have a lot of experience in ThreadX, and this project is the result of that. I hope someone will enjoy this code :)","title":"About"},{"location":"about/#gravem-discedentem-contorto-nostro-virgine","text":"This project write by me... I currently work as embedded software engineer for more than 10 years, i have a lot of experience in ThreadX, and this project is the result of that. I hope someone will enjoy this code :)","title":"Gravem discedentem contorto nostro virgine"},{"location":"config_printf/","text":"Config printf git status git add git commit In file Core/Src/main.c insert the next code #ifdef __GNUC__ #define PUTCHAR_PROTOTYPE int __io_putchar(int ch) #else #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f) #endif PUTCHAR_PROTOTYPE { // HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY); ITM_SendChar(ch); return ch; } after the SystemClock_Config function call 2. Go to Run->Debug Configuration , new window open, go to tab Debugger , in the frame Serial Wire Viewer (SWv) you will found check box Enable , set it 3. Run the debugger and make him stop on breakpoint, than go to Window->Show View->Other , in the window that open search SWV ITM Data Console , this will add new view to your screen SWV ITM Data Console , in this view press on the settings New window will open, in the bottom you see frame ITM Stimulus Ports , you need to set the right checkbox that close to 0 and press OK 4. in the view SWV ITM Data Console press on the start trace button","title":"Config printf"},{"location":"config_printf/#config-printf","text":"git status git add git commit In file Core/Src/main.c insert the next code #ifdef __GNUC__ #define PUTCHAR_PROTOTYPE int __io_putchar(int ch) #else #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f) #endif PUTCHAR_PROTOTYPE { // HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY); ITM_SendChar(ch); return ch; } after the SystemClock_Config function call 2. Go to Run->Debug Configuration , new window open, go to tab Debugger , in the frame Serial Wire Viewer (SWv) you will found check box Enable , set it 3. Run the debugger and make him stop on breakpoint, than go to Window->Show View->Other , in the window that open search SWV ITM Data Console , this will add new view to your screen SWV ITM Data Console , in this view press on the settings New window will open, in the bottom you see frame ITM Stimulus Ports , you need to set the right checkbox that close to 0 and press OK 4. in the view SWV ITM Data Console press on the start trace button","title":"Config printf"},{"location":"Install/add_threadx_plus_plus/","text":"Add ThreadX++ Introduction In this tutorial we add the ThreadX++ to project Add ThreadX++ Clone the ThreadX++ Link Copy the folder \"ThreadX++\" to your project. Now we need to add ThreadX++ to include path and source path (this step is explain in CUBE IDE, if you work on other IDE you need to figure this step yourself... good luck), In CUBE IDE go to \"Project->Properties\", new window will open, in the left side of the window go to \"C/C++ Build->Settings\", select tab \"Tool Settings\", go to \"MCU G++ Compiler->Include paths\", in the window you will see list of the included path, Add the path to ThreadX++/inc folder, you also need to do the same in \"MCU G++ Compiler->Include paths\". Now return to left side of the window and select \"C/C++ General->Paths and Symbols\" than select tab \"Source Location\" and add the folder ThreadX++/src In this step we call the function that add the ThreadX++ to system, Go to file \"AZURE_RTOS/Ap/app_azure_rtos.c\" and add the include \" #include <StartThreadX++.h> \" than add the call of the function StartThreadXPlusPlus(first_unused_memory); after the call of function App_ThreadX_Init","title":"Add ThreadX++"},{"location":"Install/add_threadx_plus_plus/#add-threadx","text":"","title":"Add ThreadX++"},{"location":"Install/add_threadx_plus_plus/#introduction","text":"In this tutorial we add the ThreadX++ to project","title":"Introduction"},{"location":"Install/add_threadx_plus_plus/#add-threadx_1","text":"Clone the ThreadX++ Link Copy the folder \"ThreadX++\" to your project. Now we need to add ThreadX++ to include path and source path (this step is explain in CUBE IDE, if you work on other IDE you need to figure this step yourself... good luck), In CUBE IDE go to \"Project->Properties\", new window will open, in the left side of the window go to \"C/C++ Build->Settings\", select tab \"Tool Settings\", go to \"MCU G++ Compiler->Include paths\", in the window you will see list of the included path, Add the path to ThreadX++/inc folder, you also need to do the same in \"MCU G++ Compiler->Include paths\". Now return to left side of the window and select \"C/C++ General->Paths and Symbols\" than select tab \"Source Location\" and add the folder ThreadX++/src In this step we call the function that add the ThreadX++ to system, Go to file \"AZURE_RTOS/Ap/app_azure_rtos.c\" and add the include \" #include <StartThreadX++.h> \" than add the call of the function StartThreadXPlusPlus(first_unused_memory); after the call of function App_ThreadX_Init","title":"Add ThreadX++"},{"location":"Install/install_st/","text":"Install ThreadX on ST Introduction In this tutorial we will install ThreadX by using the CUBE IDE, first you need to install CUBE IDE than open project, after that you can install the ThreadX. I write tutorial but you not must to use them, you can find a lot of tutorials in google. Install CUBE IDE You can download the CUBE IDE from here: Link You also need to download CUBE MX: Link Open project Open Cube IDE Go to \"File->New->STM32 project\" New window will open, in field \"Commercial Part Number\" you need to add your STM32 model (\"for example my is STM32H743ZIT6\"), in the right bottom of the screen you will see list of STM32 modules, select your model from the list, on bottom of screen press on the \"Next >\" New window will open, in the field \"Targeted Language\" select \"C++\", and in the field \"Project Name:\" Write the name of the your project, press on the \"Finish\" button. New window Eil ask if you want memory Protection, use your brain and press \"Yes\". Now wait, it can take sometimes, in the end you will get the next screen Add ThreadX In the screen you need to select the tab \"Pinout & configuration\" and select \"Software Packs\", than select \"Manage software packs\" New window will open, select tab \"STMicroelectronics\", in this tab you need to find \"X-CUBE-AZRTOS-XX\" (\"XX\" is the name of your family model, for example my is \"H7\"), than select it and it open list of package, you need to check the \" Azure RTOS STM32Cube expansion package for STM32XX series\" (again \"XX\" is the name of your family model), than press install After the download finish, Now you need to return to main screen and again select the tab \"Pinout & configuration\" and select \"Software Packs\", but now select the \"Select Components\" New window will open, you will see list of all the pack you and add to your project, you need to select \"STMicroelectronics.X-CUBE-AZRTOS-XX\"(again \"XX\" is the name of your family model)-> RTOS ThreadX-> ThreadX, than select the checkbox of \"Core\" , Note: If \"STMicroelectronics.X-CUBE-AZRTOS-XX\" is gray press on install, after the install select it. On the main screen on the left side you see list of option, select \"Middleware and Software Packs\", it open a list, than select \"X-CUBE-AZRTOS-XX\", it open new screen, check the box of field \"RTOS ThreadX\" , Save the file (go to File->Save), the IDE will generate the code, the first time will take sometime. Next step Now you ready to start with the real thing! Add ThreadX++ .","title":"Install ThreadX on ST"},{"location":"Install/install_st/#install-threadx-on-st","text":"","title":"Install ThreadX on ST"},{"location":"Install/install_st/#introduction","text":"In this tutorial we will install ThreadX by using the CUBE IDE, first you need to install CUBE IDE than open project, after that you can install the ThreadX. I write tutorial but you not must to use them, you can find a lot of tutorials in google.","title":"Introduction"},{"location":"Install/install_st/#install-cube-ide","text":"You can download the CUBE IDE from here: Link You also need to download CUBE MX: Link","title":"Install CUBE IDE"},{"location":"Install/install_st/#open-project","text":"Open Cube IDE Go to \"File->New->STM32 project\" New window will open, in field \"Commercial Part Number\" you need to add your STM32 model (\"for example my is STM32H743ZIT6\"), in the right bottom of the screen you will see list of STM32 modules, select your model from the list, on bottom of screen press on the \"Next >\" New window will open, in the field \"Targeted Language\" select \"C++\", and in the field \"Project Name:\" Write the name of the your project, press on the \"Finish\" button. New window Eil ask if you want memory Protection, use your brain and press \"Yes\". Now wait, it can take sometimes, in the end you will get the next screen","title":"Open project"},{"location":"Install/install_st/#add-threadx","text":"In the screen you need to select the tab \"Pinout & configuration\" and select \"Software Packs\", than select \"Manage software packs\" New window will open, select tab \"STMicroelectronics\", in this tab you need to find \"X-CUBE-AZRTOS-XX\" (\"XX\" is the name of your family model, for example my is \"H7\"), than select it and it open list of package, you need to check the \" Azure RTOS STM32Cube expansion package for STM32XX series\" (again \"XX\" is the name of your family model), than press install After the download finish, Now you need to return to main screen and again select the tab \"Pinout & configuration\" and select \"Software Packs\", but now select the \"Select Components\" New window will open, you will see list of all the pack you and add to your project, you need to select \"STMicroelectronics.X-CUBE-AZRTOS-XX\"(again \"XX\" is the name of your family model)-> RTOS ThreadX-> ThreadX, than select the checkbox of \"Core\" , Note: If \"STMicroelectronics.X-CUBE-AZRTOS-XX\" is gray press on install, after the install select it. On the main screen on the left side you see list of option, select \"Middleware and Software Packs\", it open a list, than select \"X-CUBE-AZRTOS-XX\", it open new screen, check the box of field \"RTOS ThreadX\" , Save the file (go to File->Save), the IDE will generate the code, the first time will take sometime.","title":"Add ThreadX"},{"location":"Install/install_st/#next-step","text":"Now you ready to start with the real thing! Add ThreadX++ .","title":"Next step"}]}